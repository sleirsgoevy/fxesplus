/*
Used by `compiler.py`.

A line with only `/*` starts a multi-line comment. A line with only `*/` ends it.
The `/*` and `*/` should be on their own line.
A `#` character starts an inline comment.

Each line should either be empty or have the format

    <address><tab character><description>

`<address>` are in hexadecimal.

`<description>` should not contains tab character or `;`.
Spaces between non-alphanumeric characters are insignificant.
Leading/trailing spaces are insignificant.
Case-insensitive.

{curly brackets} at the begin of description are meta-tags. Case insensitive.

Allowed tags:

* `{set lr}`: Jumping to this function sets the value of LR (and LCSR)
   to an instruction that pops PC, or have similar behavior.
* `{del lr}`: Reverse of {set lr}.
* `{rt}`: This function ends with a RT (or have similar behavior),
   in order to properly control the PC after jumping to this,
   it's necessary for LR to have specific values.
* `{override rename list}`: Override the auto-detected information in `570es+_names.txt`.
* `{warning ...}`: Gives a warning when the gadget/function is used.

*/

#adr		description
#----------------------

02760		{Set LR} {Override rename list} strcpy_null
0276A		[ER0] = R2
029A8		pop xr12
02AAE		{RT} r0 >>= 4
02CB0		r0 = r8, pop r8
02D34		pop er4
03182		{RT} R0 = R2, pop xr8
032A0		pop er0
032A2		no-op
03A68		pop er12
03DE2		r2 = r0
0440A		[er8] += er2, pop xr8
0442C		{RT} [er10] = er8, pop qr8
044B2		pop er2
04E50		{override rename list} {warning use strcpy_null instead} strcpy
04722		{Set LR} KO = R2 = 0             # expensive
04F68		sp = er14, pop er14
04F6A		pop er14
07468		er2 = er0, pop er8
0746A		er0 = er2, pop er8
0746C		pop er8
07EF8		{RT} memcpy, pop er14
087FC		{RT} er0 = er2
08AEE		{RT} er2 = 1, r0 = 1
087F6		er0 = max<unsigned>(er0, er2)

11D90		bl er12

				# use after {Del LR} functions and before {RT} function
11E63		{Set LR} set lr
132F2		{RT} [er0] = er2
13482		{RT} ER0 += ER2, ER8 = [ER0]
13484		{RT} ER8 = [ER0]
1417E		er0 = er8                        # expensive
1441C		r0 = [er2]
14558		r0 = 0, pop er14 r4
1468C		er8 = er0
154EE		pop xr0
157F0		r2 = r4
168AC		r0 = r8, pop xr8
168B0		pop xr8
16CDA		memcpy, pop er0 er4
16CEC		{RT} ER0 += ER2
1853A		r0 = r2 = 0
1853C		r0 = r2
19F9E		R0 &= 15
13230		{RT} er10 = er2

# ====== Actual functions (or most of)
# calling convention: register, if use stack, caller have to clean up

03136		{RT} Render, pop er0 qr8 xr4     # *(stack-front) -> real screen
03441		multiline ASCII                  # at ER0, R2 lines
035B2		{Set LR} Render buffer

04CE8		{RT} memmove                     # similar to memcpy
				# er0 <- er2. Call 4e50. Do nothing if er2 == 0.

0B656		{Del LR} wait for key
#
047F2	{RT} wait for ki
0B2E2	{Del LR} getkey # (~ki, ko) -> [er0]
047EA	{RT} ko = 0
04670	{RT} enter stop mode
04BE0	er0 = er8, pop qr8
