# ======== Functions and data labels. Not include gadgets.

# Arguments are 0-indexing.
# All lines with '#' won't match the Lua pattern so they're effectively
# comments. Comment for something is put **after** it.
# Functions with trailing `__` are uncertain.
# ========

02750		strlen_null      # strlen, but treat NULL as ""
0275A		strcpy_null
0276E		strcat_null      # delete target if try to cat NULL

02B10		basen_base_print
02C04		num_output_print # takes num*, if == NULL then print ''
02CE0		buffer_clear_lastnline
02EBA		char_print       # r0: col, r1: row, r2: char
02E78		line_print.col_0
02E7A		line_print       # r0: col, r1: row, er2: address
030BE		draw_byte        # take a pointer to a byte on the screen, the bitmask
				# to draw and the background bitmask. Using draw_mode.
0312C		render           # copy screen buffer -> screen
0343C		print_4lines
0347A		set_up_arrow
03480		set_down_arrow
03486		pd_value
044A8		memzero
04598		reset_magic_string
045A6		need_reset  # check magic string and various things
.l_03C		.yes
.l_042		.no
04640		delay       # 04640
04C30		hex_byte    # r0 -> 2-byte string in er0
04E50		strcpy
07E94		memset
07EF6		memcpy
08B82		strlen
08BA0		strchr
096E8		far_call_stub  # it's likely that the compiler auto generate
				# this to call far function pointer
096EA		strcat
0AEFA		table_home  # go to row 1 col 1 of table
0AFB0		reset_all
0B0C6		keypress_wait__
0B370		char_print_real_screen__  # char(*er0) -> real screen at (*er2)
0B45E		getkeycode
1B4EA		invalid_var

10FB4		table_prompt_print    # (byte row)

# ======== Functions that manipulate calculator-level numbers
# ======== Variable branch at 150BA, jumptable at 1AE6

13B4A
135C6
13542
1373C		mat_det
136BE
14430
13860
14776
1477A
13404		mat_add
134BE		mat_sub
134C6		mat_mul_num
13532		mat_div
139E4
13A72
135DE		mat_mul
14796
130B2		num_stat_P
13152		num_stat_Q
1316C		num_stat_R
1479A
147C4
171D2

# unary functions (decimal index 23..28, see code at 150A0)
171E6
1A716		num_abs
1483C		num_rnd
14792
##### 14792
1A88E		num_sinh

1A87C		num_cosh
1A86A		num_tanh
1A858		num_asinh
1A846		num_acosh
1A834		num_atanh
1A632		num_exp
1A61E		num_10xp
1AADC		num_sqrt
1A646		num_ln
1ABCC		num_cbrt
14DE6		num_sin
14DF0		num_cos
14E86		num_tan
1A8C4		num_asin
1A8B2		num_acos
1A8A0		num_atan
1A65A		num_log10
##### 14792
##### 14792
1A4EE		num_log
14CD8		num_pol
14CE0		num_rec
148E0
1491C
14958
1499C
##### 14796
14AB2		num_add
14ABE		num_sub
14ACA		num_mul
14AD6		num_div
##### 14792
14BBC
1A516		num_permu
1A502		num_combi
12C68
12CB6
12C3A
12C4C
1B1B8		num_negate
##### 14792
##### 14792
##### 14792
##### 14792
14BD6		num_frac
14A7E		num_cmplx_pow
111E0		num_nthroot
##### 14792
13190		num_stat_to_t
##### 14792
##### 14792
16D8E		num_inverse
16D6C		num_square
16D30		num_cube
14D00		num_percent
1A5A6		num_factorial
14D12		num_deg
14D16		num_rad
14D1A		num_grad
1AE26		cmplx_abs
148B4		cmplx_rnd
1AF44
14B1C		cmplx_add
14B30		cmplx_sub
14B44		cmplx_mul
14BA8		cmplx_div
148CC		cmplx_negate
14B08		cmplx_inverse
1717C		cmplx_square
17150		cmplx_cube
1A5A4
1333A		num_randint

# ======== Other functions


03726		num_sum_1__
15CE4		num_eval__
0454E		st_var    # void (int8_t var_index, cmplx* src)
044EE		l_var     # void (int8_t var_index, cmplx* dest)

1B0A8		num_cmp     # 2 if n0<n2, 1 if n0==n2, 4 if n0>n2
085EC		num_to_str      # char num_to_str(num const*, char*)
1B48A		num_cpy

# Arithmetic functions on num call this function and f_14A00.
# It's not clear what f_14A00 does, but it does not affect the
# calculated result.

1A9EC		num_sub_1
1AA00		num_add_1
1AA28		num_mul_1
1AA14		num_div_1
16EA2		cmplx_square_1  # have er2 == er0 when calling

19F28		l_regs          # Load register from argument
19F30		l_reg0
19F50		l_reg1
# Note that regs are stored in shuffled order -- if num is [0123456789],
# reg is [8976543210]

19F5E		st_reg0	        # Store register to argument
19F84		st_reg1

18FA2		invalid_reg1	# first digit (last in reg order) >= 10
18FAA		invalid_reg0

178F2		mv_reg0_reg1
17928		mv_reg0_reg3
17862		mv_reg0_reg4
17916		mv_reg0_reg6
178E0		mv_reg1_reg0
178BC		mv_reg1_reg3
17874		mv_reg1_reg4
1782C		mv_reg1_reg5
17898		mv_reg1_reg6
178CE		mv_reg3_reg0
1793A		mv_reg3_reg1
17886		mv_reg4_reg0
17850		mv_reg5_reg0
1783E		mv_reg5_reg1
178AA		mv_reg6_reg0
17904		mv_reg6_reg1

13234		num_random        # 'Ran#'
132DC		mv_n4_1d10       # Used when value of num [er4] is detected as invalid.

132EC		num_normalize     # set 2 last bytes to '99 00' <-> multiply by a
				# power of 10 to make it a value to a number in [0.1, 1[

1743C		num_compute_header__
.l_04C		.ret_04
.l_04E		.ret
.l_050		.ret_01
.l_054		.ret_02
.l_058		.ret_f0
173C0		set_reg1_10
173D6		set_reg1_100d9    # 100/9 = 11.1111...
173F0		set_reg1_1d10     # 1/10 = 0.1
1740A		set_reg1_200
17424		set_reg1_180

1B388		num_trunc__      # may be floor. Used by num_random.
1B296		num_mulxp__       # num [er0] *= 10 ^ er2

133E6		mv_n8_n4          # mv_nx_ny: numcpy(num [ERx] <- num [ERy])
133EA		mv_n0_n4
133EE		mv_n10_n4
133F2		mv_n10_n2
133F4		mv_n0_n2

1B0F6		num_fromdigit     # num [er0] = r2, with 0 <= r2 < 10
				# ('00 00 .. 00' for 0, '0x 00 .. 00 01' for nonzero)
1B3D4		num_frombyte      # num [er0] = r2
17498		byte_to_bcd       # (byte) r0 -> (dec16_t) er0
174C2		bcd_to_byte

1B326		num_get_exp       # int16_t(void)
.l_03E		.nonneg_exp
.l_046		.ret
.l_04C		.ret_5000         # invalid

133FA		num_invalid_zf__  # call below and do a cmp with 1
1B03E		num_invalid__     # == 1 <-> invalid

133E2		num_mul_2__

04D64		num_unk_1__       # used by random function.
1A7FE		num_unk_1_1__
17F5E		num_unk_1_r__     # _r functions operate on the registers.
04DE0		num_unk_2__
1B430		num_to_byte       # num[ER0] -> R0, truncated to integer.
.l_030		.exp_1            # return 0 for some invalid numbers.
.l_034		.exp_2
.l_040		.invalid

17D56		num_arith_r       # reg0 = reg0 (arith_op) reg1
19C0E		num_div_r
19D58		num_mul_r
1A044		num_sub_r
1A072		num_add_r
1A0BA		num_add1_r__
1A092		num_sub1_r__

# ======== Variable branch at 15D30, jumptable at 17A8
15672		num_sum__     # variable x is restored here
15682
15712
157B0
158C6
15AA0
15AFE
15B64
15B96
15C30
15CAC

# ======== Far call at 09A12, jumptable at 1FB6
# It's not known what those functions do. However, ways to call the function
# is listed if known, which may help determining their function.

0C806		# navigating boxes of int
##### 0C806
0C7C2
##### 0C7C2
0C86A		# cmplx
0C874		# enter lineio
0C22E		# on boot
0995E
##### 0995E
##### 0995E
0C316
0C31A
##### 0995E
0C31E		# on eval
##### 0C31A
##### 0C31A
##### 0C31E
0C728
0C836
##### 0C836
##### 0C836
##### 0C836
0C6DE
##### 0C6DE
0C74C
0C77A
0C64A
0C692
##### 0995E
##### 0995E
0C7A8		# on backspace

# ======== Some entries generated by CasioEmu/dev-log-var-call
# There is no further investigation what they do

06456		# on *printing* integrate in math mode
05EBC		# draw d/dx
05B2C		# draw sqrt

# ======== Data labels (also see the cheat table)

d_00400
d_00694
d_00707
d_00746
d_00782
d_007CC
d_007E6
d_007FC
d_0080A
d_0080B
d_00812
d_0081A
d_0081C
d_0081D
d_0081E
d_0081F
d_0082C
d_0082D
d_0082E
d_0082F
d_00844
d_0084E
d_00856
d_0085B
d_00864
d_01C64
d_01C6C
d_01DB2
d_01DCE
d_01DDC
d_01DE8
d_01DF4
d_01DF6
d_01E24
d_01E5C
d_01E86
d_01E88
d_01F74
d_01FB6
d_01FB8
d_02399
d_023C6
d_023C8
d_023C9
d_023D2
d_023D3
d_023D4
d_023D5
d_08000		reg0
d_08002		reg0.2
d_08004		reg0.4
d_08005		reg0.5
d_08006		reg0.6
d_08007		reg0.7
d_08008		reg0.8
d_08009		reg0.9
d_0800A
d_0800B
d_0800C
d_0800D
d_0800E
d_0800F
d_08010		reg1
d_08011		reg1.1
d_08012		reg1.2
d_08018		reg1.8
d_08019		reg1.9
d_0801A
d_0801C
d_0801D
d_0801E		arith_op       # (-, +, ÷, ×) = 9, 8, 7, 6
d_0801F
d_08020		reg2
d_08022		reg2.2
d_08029		reg2.9
d_0802A
d_0802B
d_0802C
d_0802D
d_0802E
d_0802F
d_08030		reg3
d_08032		reg3.2
d_08039		reg3.9
d_0803A
d_0803B
d_0803C		reg4
d_08044		reg4.8
d_08046		reg5
d_0804C		reg5.6
d_08050		reg6
d_08052		reg6.2
d_08059		reg6.9
d_0805A
d_0805B
d_0805C		arg0_ref      # functions that manipulate numbers (such as
d_0805E		arg1_ref      # num_add) save the arguments reference here
d_080DC
d_080DD		cursor_noflash
d_080DE
d_080DF
d_080E0
d_080E1
d_080F2
d_080F4
d_080F5		last_fn_key  # example: 'sin' = A0, 'sin^-1' = B0
d_080F7
d_080F8		modifiers     # 08:shift,04:alpha,02:RCL,01:STO
d_080F9		mode
				# comp 193, cmplx 196, stat 3, basen 2, eqn 69, mat 6,
				# table 136, vct 7, ratio 74, ineq 75, dist 12

d_080FA		submode       # base-n:(base-1),ineq:(degree+1),stat:1~8,etc.
d_080FB		screen_state  # normal: 0, mode: 1, setup: 2, hyp/deg...: 3
d_080FC
d_080FD
d_080FE
d_080FF
d_08100
d_08101
d_08102		setup.number_form   # fix/sci/norm
d_08103
d_08104
d_08105		setup.deg_form      # d: 4, r: 5, g: 6
d_08106		setup.mthio
d_08107
d_08108
d_08109		setup.stat_freq
d_0810A		setup.rdec
d_0810C
d_0810E		setup.contrast
d_0810F
d_08110		cursor_pos_byte
d_08111
d_08112		lineio_disp
d_08113
d_08114		cursor_xcor
d_08115		cursor_ycor
d_08116
d_08117
d_08118		viewport_table  # 1 or 2 for 4-column tables
d_08119		row_in_table    # relative to current viewport
d_0811A		col_in_table
d_0811B		font_size
d_0811C		draw_mode
				# 0: white background
				# 4: white background (sanitize, only draw inside background)
				# 1: transparent background
				# 2: AND with screen
				# 3 (otherwise): xor with screen

d_0811D		use_buffer   # real screen or screen buffer
d_08120
d_08122
d_08123		use_output_charset
				# example: 0x4E is '×' input but 'N' output
d_08124
d_08125
d_08126
d_08128		formula_ptr   # usually 0x8154
d_0812A
d_0812C
d_0821C		random_state  # Used in the random generator.
d_08224		timer         # 2-byte value. Part of the random state.

d_08226		var_m
d_08230		var_ans
d_0823A		var_a
d_08244		var_b
d_0824E		var_c
d_08258		var_d
d_08262		var_e
d_0826C		var_f
d_08276		var_x
d_08280		var_y

d_083FC
d_083FD
d_083FE

d_0860E		magic_string  # 15 bytes '0f 0e 0d 0c ... 02 01', the calculator
				# is reset on startup if this is corrupted

d_087D0		screen_buffer
d_087D1 	screen_buffer.1
d_087D2 	screen_buffer.2
d_087D3 	screen_buffer.3
d_087D4 	screen_buffer.4
d_087D5 	screen_buffer.5
d_087D7 	screen_buffer.7
d_087D8 	screen_buffer.8
d_087D9 	screen_buffer.9
d_087DA 	screen_buffer.A
d_087DB 	screen_buffer.B
d_08DEA

d_0F000		hardware.dsr
d_0F008
d_0F00A
d_0F010
d_0F014
d_0F018
d_0F020		timer.interval
d_0F022		timer.counter
d_0F024
d_0F025		timer.control
d_0F030
d_0F031
d_0F032		screen.contrast
d_0F033
d_0F034
d_0F040		keyboard.ki
d_0F041
d_0F042		keyboard.ki_filter
d_0F044		keyboard.ko_mask
d_0F045
d_0F046		keyboard.ko
d_0F047
d_0F048
d_0F049
d_0F221
d_0F222
d_0F223
d_0F800		screen.disp
d_0F801		screen.disp.1
d_0F802		screen.disp.2
d_0F80A		screen.disp.A
d_0F80B		screen.disp.B
